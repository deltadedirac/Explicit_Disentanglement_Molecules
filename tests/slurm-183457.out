Input Notebook:  5_BLAT_test_mutation_effects_pred_preprint.ipynb
Output Notebook: res_5_BLAT_test_mutation_effects_pred_preprint.ipynb
Executing:   0%|          | 0/13 [00:00<?, ?cell/s]Using selector: EpollSelector
Instantiating kernel 'Python 3 (ipykernel)' with kernel provisioner: local-provisioner
Starting kernel: ['/z/home/sgal/miniconda3/envs/PGM_alignment/bin/python', '-m', 'ipykernel_launcher', '-f', '/tmp/tmpuuk42va8.json', '--HistoryManager.hist_file=:memory:']
Connecting to: tcp://127.0.0.1:54935
connecting iopub channel to tcp://127.0.0.1:33863
Connecting to: tcp://127.0.0.1:33863
connecting shell channel to tcp://127.0.0.1:33593
Connecting to: tcp://127.0.0.1:33593
connecting stdin channel to tcp://127.0.0.1:60043
Connecting to: tcp://127.0.0.1:60043
connecting heartbeat channel to tcp://127.0.0.1:47149
connecting control channel to tcp://127.0.0.1:54935
Using selector: EpollSelector
Connecting to: tcp://127.0.0.1:54935
Executing notebook with kernel: python3
Executing Cell 1---------------------------------------
Executing cell:
"""
from google.colab import drive
drive.mount('/content/gdrive/')

#!pip install -q condacolab
#import condacolab
#condacolab.install()

%cd /content/gdrive/MyDrive/Explicit_Disentanglement_Molecules/tests
!pip install gpytorch mlflow tensorboard tensorboardx torch-tb-profiler pyfiglet dpath logomaker biopython pandas numpy tqdm confuse seaborn nbconvert
!pip install papermill[all]
!pip install torchvision
"""
msg_type: status
content: {'execution_state': 'busy'}
msg_type: execute_input
content: {'code': '"""\nfrom google.colab import drive\ndrive.mount(\'/content/gdrive/\')\n\n#!pip install -q condacolab\n#import condacolab\n#condacolab.install()\n\n%cd /content/gdrive/MyDrive/Explicit_Disentanglement_Molecules/tests\n!pip install gpytorch mlflow tensorboard tensorboardx torch-tb-profiler pyfiglet dpath logomaker biopython pandas numpy tqdm confuse seaborn nbconvert\n!pip install papermill[all]\n!pip install torchvision\n"""', 'execution_count': 1}
msg_type: execute_result
content: {'data': {'text/plain': '"\\nfrom google.colab import drive\\ndrive.mount(\'/content/gdrive/\')\\n\\n#!pip install -q condacolab\\n#import condacolab\\n#condacolab.install()\\n\\n%cd /content/gdrive/MyDrive/Explicit_Disentanglement_Molecules/tests\\n!pip install gpytorch mlflow tensorboard tensorboardx torch-tb-profiler pyfiglet dpath logomaker biopython pandas numpy tqdm confuse seaborn nbconvert\\n!pip install papermill[all]\\n!pip install torchvision\\n"'}, 'metadata': {}, 'execution_count': 1}
"\nfrom google.colab import drive\ndrive.mount('/content/gdrive/')\n\n#!pip install -q condacolab\n#import condacolab\n#condacolab.install()\n\n%cd /content/gdrive/MyDrive/Explicit_Disentanglement_Molecules/tests\n!pip install gpytorch mlflow tensorboard tensorboardx torch-tb-profiler pyfiglet dpath logomaker biopython pandas numpy tqdm confuse seaborn nbconvert\n!pip install papermill[all]\n!pip install torchvision\n"
msg_type: status
content: {'execution_state': 'idle'}
Ending Cell 1------------------------------------------
Executing:   8%|▊         | 1/13 [00:02<00:32,  2.70s/cell]Executing Cell 2---------------------------------------
Executing cell:
import pdb
import torch, os
import argparse, datetime
import gc,time
from tqdm import tqdm
import __init__



#from src.gp_cpab.src.transformation.gp_cpab import gp_cpab
#from src.gp_cpab.src.transformation.gp_cpab_tmp import gp_cpab
from src.gp_cpab.src.transformation.configManager import configManager
from src.gp_cpab.src.extra.experiment_utilities import *

from src.models.trainer_tmp import vae_trainer
from src.unsuper.unsuper.data.mnist_data_loader import mnist_data_loader
from src.unsuper.unsuper.data.perception_data_loader import perception_data_loader
from src.unsuper.unsuper.helper.utility import model_summary
from src.models.encoder_decoder import get_encoder, get_decoder, get_list_encoders, get_list_decoders
from src.models import get_model

from src.seqsDataLoader import seqsReader, seqsDatasetLoader, Sequence_Data_Loader
from src.dataLoaderDiffeo import *

#from src.models.experimental.vitae_ci_gp_detached_deepseq import vitae_ci_gp_no_deepseq
from src.models.experimental.PGM_LA_latent_alignment import PGM_LA_latent_alignment
from src.models.experimental.deepsequence import DeepSequence
msg_type: status
content: {'execution_state': 'busy'}
msg_type: execute_input
content: {'code': 'import pdb\nimport torch, os\nimport argparse, datetime\nimport gc,time\nfrom tqdm import tqdm\nimport __init__\n\n\n\n#from src.gp_cpab.src.transformation.gp_cpab import gp_cpab\n#from src.gp_cpab.src.transformation.gp_cpab_tmp import gp_cpab\nfrom src.gp_cpab.src.transformation.configManager import configManager\nfrom src.gp_cpab.src.extra.experiment_utilities import *\n\nfrom src.models.trainer_tmp import vae_trainer\nfrom src.unsuper.unsuper.data.mnist_data_loader import mnist_data_loader\nfrom src.unsuper.unsuper.data.perception_data_loader import perception_data_loader\nfrom src.unsuper.unsuper.helper.utility import model_summary\nfrom src.models.encoder_decoder import get_encoder, get_decoder, get_list_encoders, get_list_decoders\nfrom src.models import get_model\n\nfrom src.seqsDataLoader import seqsReader, seqsDatasetLoader, Sequence_Data_Loader\nfrom src.dataLoaderDiffeo import *\n\n#from src.models.experimental.vitae_ci_gp_detached_deepseq import vitae_ci_gp_no_deepseq\nfrom src.models.experimental.PGM_LA_latent_alignment import PGM_LA_latent_alignment\nfrom src.models.experimental.deepsequence import DeepSequence', 'execution_count': 2}
msg_type: stream
content: {'name': 'stderr', 'text': '/z/home/sgal/.local/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n'}
/z/home/sgal/.local/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html
  from .autonotebook import tqdm as notebook_tqdm

msg_type: stream
content: {'name': 'stdout', 'text': "Could not import libcpab, error was\nNo module named 'libcpab'\n"}
Could not import libcpab, error was
No module named 'libcpab'

msg_type: display_data
content: {'data': {'text/plain': '<Figure size 640x480 with 0 Axes>'}, 'metadata': {}, 'transient': {}}
<Figure size 640x480 with 0 Axes>
msg_type: display_data
content: {'data': {'text/plain': '<Figure size 640x480 with 0 Axes>'}, 'metadata': {}, 'transient': {}}
<Figure size 640x480 with 0 Axes>
msg_type: display_data
content: {'data': {'text/plain': '<Figure size 640x480 with 0 Axes>'}, 'metadata': {}, 'transient': {}}
<Figure size 640x480 with 0 Axes>
msg_type: status
content: {'execution_state': 'idle'}
Ending Cell 2------------------------------------------
Executing:  15%|█▌        | 2/13 [00:08<00:47,  4.35s/cell]Executing Cell 3---------------------------------------
Executing cell:
import argparse; import sys; sys.argv=['']; del sys
import math

def define_prior_init(channels, space='log'):
    prior_init = []
    base_alpha = channels-2

    if space=='log':
        #prior_init = [math.log(1e-6)]*channels
        prior_init = [math.log(1e-6), *([ math.log(1/base_alpha) ]*base_alpha)]
    else:
        # Current Approach
        #prior_init = [0.0, *([1/base_alpha]*base_alpha)]
        #prior_init = [0.0, 0.0, *([1/base_alpha]*base_alpha)]


        # Approach A for avoiding flat landscape in the optimization - avoiding local optima
        prior_init = [1.0, 0.0, *([0.0]*base_alpha) ]

    return prior_init

def argparser():
    """ Argument parser for the main script """
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    # Model settings
    ms = parser.add_argument_group('Model settings')
    ms.add_argument('--model', type=str, default='vitae_ci', help='model to train')
    ms.add_argument('--ed_type', type=str, default='mlp,mlp', help='encoder/decoder type')
    ms.add_argument('--stn_type', type=str, default='gp_cpab', help='transformation type to use')
    ms.add_argument('--beta', type=float, default=16, help='beta value for beta-vae model') #16

    # Training settings
    ts = parser.add_argument_group('Training settings')
    ts.add_argument('--n_epochs', type=int, default=500, help='number of epochs of training')
    ts.add_argument('--eval_epoch', type=int, default=5, help='when to evaluate log(p(x))')
    ts.add_argument('--batch_size', type=int, default=10, help='size of the batches') # batch=10,warmup=10, epochs=100
    ts.add_argument('--warmup', type=int, default=5, help='number of warmup epochs for kl-terms')
    ts.add_argument('--lr', type=float, default=1e-3, help='learning rate for adam optimizer') # 1e-5 for 2 sequence deepseq 2 seqs other# 1e-3, 1e-7 # weird case for 550 iters and 1e-4, works in trans but regular in reconstruction

    # Paths to use
    paths = parser.add_argument_group('Paths')
    paths.add_argument('--path_orig', type=str, default="../data/set_preprint/BLAT500_gaps.fasta", help='original sequence to deform')  #"../data/WW10seeds_rawnoHoles.fasta"  #orig_3aa.fasta orig_3aag.fasta
    paths.add_argument('--path_aligned_orig', type=str, default="../data/set_preprint/BLAT500_alignment.fasta", help='original sequence to deform')    #orig_3aa.fasta orig_3aag.fasta


    paths.add_argument('--path_preexist_linear', type=str, default="../../models/CPABlinear3.pth", help='prebuilt model using linear case')
    paths.add_argument('--path_preexist_gp', type=str, default="../../models/CPABGPB3.pth", help='prebuilt model using gp case')
    paths.add_argument('--path_automated_report', type=str, default="../../Results", help='path to save automatic report')
    paths.add_argument('--logdir', type=str, default="../../Results", help='where to store results')

    gpsetup = parser.add_argument_group('GPSetup')
    #gpsetup.add_argument('--Task', type=int, default = 8, help='Amount of channels in multitask-gp estimator')
    #gpsetup.add_argument('--Initialization', type=list, default = [0.0, 0.143, 0.143, 0.143, 0.143, 0.143, 0.143, 0.143], help='multitaks-gp initialization')
    gpsetup.add_argument('--Task', type=int, default = 22, help='Amount of channels in multitask-gp estimator')
    gpsetup.add_argument('--Initialization', type=list, default = define_prior_init(22, space='default'), help='multitaks-gp initialization') # before it was 19 and works good in current setup with uniform distributed values in prior
    #gpsetup.add_argument('--Task', type=int, default = 11, help='Amount of channels in multitask-gp estimator')
    #gpsetup.add_argument('--Initialization', type=list, default = [0.0, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], help='multitaks-gp initialization') #[0.0, 0.33, 0.33, 0.33] #[0.5, 0.5]
    gpsetup.add_argument('--Lengthscale', type=float, default = 0.5, help='lengthscale on square-exponential kernel') # *** 0.5 *** #0.25, #0.5 + init gives better for 2 gaps case, # 1.25
    gpsetup.add_argument('--noise_constraint', type=list, default = [1e-3,1e-1], help='noise constrain -- [lower_bound, upper_bound]') #16
    gpsetup.add_argument('--Option', type=str, default = 'multitask', help='noise constrain') #16

    # CPAB features
    cpab = parser.add_argument_group('CPAB')
    cpab.add_argument('--device', type=str, default="gpu", help='device')
    cpab.add_argument('--modeflag', type=str, default="1D", help='dimensionality of tesselation')
    cpab.add_argument('--window_grid', type=int, default=1750, help='number of tesselation cells') #6 80, the increasing of tess improve the performance when there are more samples to train the density estimator
    cpab.add_argument('--channels', type=int, default=1750, help='amount of channels for estimation --deprecated')
    cpab.add_argument('--interpolation_type', type=str, default="GP", help='type of interpolation between maps')

    # Hyper settings
    hp = parser.add_argument_group('Variational settings')
    hp.add_argument('--latent_dim', type=int, default=60, help='dimensionality of the latent space') #40, 5, 10, 40 is the bst one for WW
    hp.add_argument('--density', type=str, default='softmax', help='output density')  # bernoulli  gaussian
    hp.add_argument('--eq_samples', type=int, default=1, help='number of MC samples over the expectation over E_q(z|x)')
    hp.add_argument('--iw_samples', type=int, default=1, help='number of importance weighted samples')


    # Parse and return
    args = parser.parse_args()
    return args
msg_type: status
content: {'execution_state': 'busy'}
msg_type: execute_input
content: {'code': 'import argparse; import sys; sys.argv=[\'\']; del sys\nimport math\n\ndef define_prior_init(channels, space=\'log\'):\n    prior_init = []\n    base_alpha = channels-2\n\n    if space==\'log\':\n        #prior_init = [math.log(1e-6)]*channels\n        prior_init = [math.log(1e-6), *([ math.log(1/base_alpha) ]*base_alpha)]\n    else:\n        # Current Approach\n        #prior_init = [0.0, *([1/base_alpha]*base_alpha)]\n        #prior_init = [0.0, 0.0, *([1/base_alpha]*base_alpha)]\n\n\n        # Approach A for avoiding flat landscape in the optimization - avoiding local optima\n        prior_init = [1.0, 0.0, *([0.0]*base_alpha) ]\n\n    return prior_init\n\ndef argparser():\n    """ Argument parser for the main script """\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    # Model settings\n    ms = parser.add_argument_group(\'Model settings\')\n    ms.add_argument(\'--model\', type=str, default=\'vitae_ci\', help=\'model to train\')\n    ms.add_argument(\'--ed_type\', type=str, default=\'mlp,mlp\', help=\'encoder/decoder type\')\n    ms.add_argument(\'--stn_type\', type=str, default=\'gp_cpab\', help=\'transformation type to use\')\n    ms.add_argument(\'--beta\', type=float, default=16, help=\'beta value for beta-vae model\') #16\n\n    # Training settings\n    ts = parser.add_argument_group(\'Training settings\')\n    ts.add_argument(\'--n_epochs\', type=int, default=500, help=\'number of epochs of training\')\n    ts.add_argument(\'--eval_epoch\', type=int, default=5, help=\'when to evaluate log(p(x))\')\n    ts.add_argument(\'--batch_size\', type=int, default=10, help=\'size of the batches\') # batch=10,warmup=10, epochs=100\n    ts.add_argument(\'--warmup\', type=int, default=5, help=\'number of warmup epochs for kl-terms\')\n    ts.add_argument(\'--lr\', type=float, default=1e-3, help=\'learning rate for adam optimizer\') # 1e-5 for 2 sequence deepseq 2 seqs other# 1e-3, 1e-7 # weird case for 550 iters and 1e-4, works in trans but regular in reconstruction\n\n    # Paths to use\n    paths = parser.add_argument_group(\'Paths\')\n    paths.add_argument(\'--path_orig\', type=str, default="../data/set_preprint/BLAT500_gaps.fasta", help=\'original sequence to deform\')  #"../data/WW10seeds_rawnoHoles.fasta"  #orig_3aa.fasta orig_3aag.fasta\n    paths.add_argument(\'--path_aligned_orig\', type=str, default="../data/set_preprint/BLAT500_alignment.fasta", help=\'original sequence to deform\')    #orig_3aa.fasta orig_3aag.fasta\n\n\n    paths.add_argument(\'--path_preexist_linear\', type=str, default="../../models/CPABlinear3.pth", help=\'prebuilt model using linear case\')\n    paths.add_argument(\'--path_preexist_gp\', type=str, default="../../models/CPABGPB3.pth", help=\'prebuilt model using gp case\')\n    paths.add_argument(\'--path_automated_report\', type=str, default="../../Results", help=\'path to save automatic report\')\n    paths.add_argument(\'--logdir\', type=str, default="../../Results", help=\'where to store results\')\n\n    gpsetup = parser.add_argument_group(\'GPSetup\')\n    #gpsetup.add_argument(\'--Task\', type=int, default = 8, help=\'Amount of channels in multitask-gp estimator\')\n    #gpsetup.add_argument(\'--Initialization\', type=list, default = [0.0, 0.143, 0.143, 0.143, 0.143, 0.143, 0.143, 0.143], help=\'multitaks-gp initialization\')\n    gpsetup.add_argument(\'--Task\', type=int, default = 22, help=\'Amount of channels in multitask-gp estimator\')\n    gpsetup.add_argument(\'--Initialization\', type=list, default = define_prior_init(22, space=\'default\'), help=\'multitaks-gp initialization\') # before it was 19 and works good in current setup with uniform distributed values in prior\n    #gpsetup.add_argument(\'--Task\', type=int, default = 11, help=\'Amount of channels in multitask-gp estimator\')\n    #gpsetup.add_argument(\'--Initialization\', type=list, default = [0.0, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], help=\'multitaks-gp initialization\') #[0.0, 0.33, 0.33, 0.33] #[0.5, 0.5]\n    gpsetup.add_argument(\'--Lengthscale\', type=float, default = 0.5, help=\'lengthscale on square-exponential kernel\') # *** 0.5 *** #0.25, #0.5 + init gives better for 2 gaps case, # 1.25\n    gpsetup.add_argument(\'--noise_constraint\', type=list, default = [1e-3,1e-1], help=\'noise constrain -- [lower_bound, upper_bound]\') #16\n    gpsetup.add_argument(\'--Option\', type=str, default = \'multitask\', help=\'noise constrain\') #16\n\n    # CPAB features\n    cpab = parser.add_argument_group(\'CPAB\')\n    cpab.add_argument(\'--device\', type=str, default="gpu", help=\'device\')\n    cpab.add_argument(\'--modeflag\', type=str, default="1D", help=\'dimensionality of tesselation\')\n    cpab.add_argument(\'--window_grid\', type=int, default=1750, help=\'number of tesselation cells\') #6 80, the increasing of tess improve the performance when there are more samples to train the density estimator\n    cpab.add_argument(\'--channels\', type=int, default=1750, help=\'amount of channels for estimation --deprecated\')\n    cpab.add_argument(\'--interpolation_type\', type=str, default="GP", help=\'type of interpolation between maps\')\n\n    # Hyper settings\n    hp = parser.add_argument_group(\'Variational settings\')\n    hp.add_argument(\'--latent_dim\', type=int, default=60, help=\'dimensionality of the latent space\') #40, 5, 10, 40 is the bst one for WW\n    hp.add_argument(\'--density\', type=str, default=\'softmax\', help=\'output density\')  # bernoulli  gaussian\n    hp.add_argument(\'--eq_samples\', type=int, default=1, help=\'number of MC samples over the expectation over E_q(z|x)\')\n    hp.add_argument(\'--iw_samples\', type=int, default=1, help=\'number of importance weighted samples\')\n\n\n    # Parse and return\n    args = parser.parse_args()\n    return args', 'execution_count': 3}
msg_type: status
content: {'execution_state': 'idle'}
Ending Cell 3------------------------------------------
Executing Cell 4---------------------------------------
Executing cell:
print(__package__)
args = argparser()
'''---------------------------------------------------------'''
std = configManager(args)

device = std.parserinfo('device')
modeflag = std.parserinfo('modeflag')
window_grid = std.parserinfo('window_grid')
channels = std.parserinfo('channels')
option = std.parserinfo('Option')
beta = std.parserinfo('beta')
#lossmetric = std.parserinfo('lossfunctmetric')

path = std.parserinfo('path_orig')
path_aligned = std.parserinfo('path_aligned_orig')
path_preexist_model = std.parserinfo('path_preexist_linear')
path_preexist_modelGP = std.parserinfo('path_preexist_gp')

#self.config, self.constrain, self.tasks, self.interpolation_type, self.option
gp_params = std.get_config_vals(['noise_constraint','Task','interpolation_type','Option','Lengthscale','Initialization'])

alphabets = ['?','-', 'A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'Y'] 
logdir = 'pretrained_deepseq'; outmodel_name = 'trained_model_BLAT_23_preprint_22feb2024.pth'


print('Ok')
msg_type: status
content: {'execution_state': 'busy'}
msg_type: execute_input
content: {'code': "print(__package__)\nargs = argparser()\n'''---------------------------------------------------------'''\nstd = configManager(args)\n\ndevice = std.parserinfo('device')\nmodeflag = std.parserinfo('modeflag')\nwindow_grid = std.parserinfo('window_grid')\nchannels = std.parserinfo('channels')\noption = std.parserinfo('Option')\nbeta = std.parserinfo('beta')\n#lossmetric = std.parserinfo('lossfunctmetric')\n\npath = std.parserinfo('path_orig')\npath_aligned = std.parserinfo('path_aligned_orig')\npath_preexist_model = std.parserinfo('path_preexist_linear')\npath_preexist_modelGP = std.parserinfo('path_preexist_gp')\n\n#self.config, self.constrain, self.tasks, self.interpolation_type, self.option\ngp_params = std.get_config_vals(['noise_constraint','Task','interpolation_type','Option','Lengthscale','Initialization'])\n\nalphabets = ['?','-', 'A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'Y'] \nlogdir = 'pretrained_deepseq'; outmodel_name = 'trained_model_BLAT_23_preprint_22feb2024.pth'\n\n\nprint('Ok')", 'execution_count': 4}
msg_type: stream
content: {'name': 'stdout', 'text': 'None\nOk\n'}
None
Ok

msg_type: status
content: {'execution_state': 'idle'}
Ending Cell 4------------------------------------------
Executing Cell 5---------------------------------------
Executing cell:
from src.gp_cpab.src.extra import experiment_utilities
from src.dataLoaderDiffeo import datasetLoader

# Raw Sequences, to see if we can align the sequences somehow
c2i, i2c, i2i = seqsReader._predefine_encoding(alphabets)
dataset_msa = seqsDatasetLoader(pathBLAT_data = path, alphabet = alphabets, enable_variable_length=True, device=device)
#x1 = dataset_msa.prot_space
dataset_aligned_msa = seqsDatasetLoader(pathBLAT_data = path_aligned, alphabet = alphabets, enable_variable_length=True, device=device)


'''--------------------------------------------------------------------------------------------------------------------------'''
'''dataset_msa.prot_space = replace_target_token_gaps(dataset_msa.prot_space, c2i, '-')[:,:,1:]
dataset_aligned_msa.prot_space = replace_target_token_gaps(dataset_aligned_msa.prot_space, c2i, '-')[:,:,1:]
alphabets=['L','Q','R']
c2i, i2c, i2i = seqsReader._predefine_encoding(alphabets)'''
'''--------------------------------------------------------------------------------------------------------------------------'''

# Load data
print('Loading data')

batches = args.batch_size #16 # 448

# initially the dimension is [448, 34, 21]. However as it is necesary to ignore
# the batch size, I just create a tuple, by taking just the last 2 components from the size
trainloader, testloader = Sequence_Data_Loader(dataset_msa, dataset_test=None, batch_size=batches)
trainloader_pretrainer, testloader_pretrainer = Sequence_Data_Loader(dataset_aligned_msa, dataset_test=None, batch_size=100)
#trainloader2, testloader2 = Sequence_Data_Loader(dataset_msa2, dataset_test=None, batch_size=batches)


seq_size = ( [*dataset_msa.prot_space.shape][1:])
msg_type: status
content: {'execution_state': 'busy'}
msg_type: execute_input
content: {'code': "from src.gp_cpab.src.extra import experiment_utilities\nfrom src.dataLoaderDiffeo import datasetLoader\n\n# Raw Sequences, to see if we can align the sequences somehow\nc2i, i2c, i2i = seqsReader._predefine_encoding(alphabets)\ndataset_msa = seqsDatasetLoader(pathBLAT_data = path, alphabet = alphabets, enable_variable_length=True, device=device)\n#x1 = dataset_msa.prot_space\ndataset_aligned_msa = seqsDatasetLoader(pathBLAT_data = path_aligned, alphabet = alphabets, enable_variable_length=True, device=device)\n\n\n'''--------------------------------------------------------------------------------------------------------------------------'''\n'''dataset_msa.prot_space = replace_target_token_gaps(dataset_msa.prot_space, c2i, '-')[:,:,1:]\ndataset_aligned_msa.prot_space = replace_target_token_gaps(dataset_aligned_msa.prot_space, c2i, '-')[:,:,1:]\nalphabets=['L','Q','R']\nc2i, i2c, i2i = seqsReader._predefine_encoding(alphabets)'''\n'''--------------------------------------------------------------------------------------------------------------------------'''\n\n# Load data\nprint('Loading data')\n\nbatches = args.batch_size #16 # 448\n\n# initially the dimension is [448, 34, 21]. However as it is necesary to ignore\n# the batch size, I just create a tuple, by taking just the last 2 components from the size\ntrainloader, testloader = Sequence_Data_Loader(dataset_msa, dataset_test=None, batch_size=batches)\ntrainloader_pretrainer, testloader_pretrainer = Sequence_Data_Loader(dataset_aligned_msa, dataset_test=None, batch_size=100)\n#trainloader2, testloader2 = Sequence_Data_Loader(dataset_msa2, dataset_test=None, batch_size=batches)\n\n\nseq_size = ( [*dataset_msa.prot_space.shape][1:])", 'execution_count': 5}
msg_type: stream
content: {'name': 'stderr', 'text': '/net/ged.nzcorp.net/z/home/sgal/ML_Projects/Explicit_Disentanglement_Molecules/src/seqsDataLoader.py:165: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  self.prot_space = torch.tensor(self.prot_space, dtype=torch.float32, device=device)\n'}
/net/ged.nzcorp.net/z/home/sgal/ML_Projects/Explicit_Disentanglement_Molecules/src/seqsDataLoader.py:165: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.prot_space = torch.tensor(self.prot_space, dtype=torch.float32, device=device)

msg_type: stream
content: {'name': 'stdout', 'text': 'Loading data\n'}
Loading data

msg_type: status
content: {'execution_state': 'idle'}
Ending Cell 5------------------------------------------
Executing:  38%|███▊      | 5/13 [00:11<00:15,  1.90s/cell]Executing Cell 6---------------------------------------
Executing cell:
# Loading BLAT dataset
deepseq = DeepSequence(seq_size, args.latent_dim, alphabets, device = device)
optimizer_deepseq = torch.optim.AdamW(deepseq.parameters(), lr=args.lr*0.01)
loss_function = LossFunctionsAlternatives()
pretrained_deepseq_path = logdir + "/" + outmodel_name
check_parameter_historic = []

casted_device = "cuda" if device=="gpu" or device=="cuda" else "cpu" if device=='cpu'else 'mps'

if os.path.isfile(pretrained_deepseq_path):
    print ("Loading Deformation Model...")
    deepseq.load_state_dict( torch.load(pretrained_deepseq_path, map_location=casted_device) )
    print ("Loaded")

else:
    deepseq.training_representation(trainloader_pretrainer, loss_function, optimizer_deepseq, 1000, 1, logdir=logdir, out_modelname=outmodel_name, beta=1 )


deepseq(dataset_msa.prot_space)
plot_logos_probs(deepseq(dataset_msa.prot_space)[0], alphabets)
msg_type: status
content: {'execution_state': 'busy'}
msg_type: execute_input
content: {'code': '# Loading BLAT dataset\ndeepseq = DeepSequence(seq_size, args.latent_dim, alphabets, device = device)\noptimizer_deepseq = torch.optim.AdamW(deepseq.parameters(), lr=args.lr*0.01)\nloss_function = LossFunctionsAlternatives()\npretrained_deepseq_path = logdir + "/" + outmodel_name\ncheck_parameter_historic = []\n\ncasted_device = "cuda" if device=="gpu" or device=="cuda" else "cpu" if device==\'cpu\'else \'mps\'\n\nif os.path.isfile(pretrained_deepseq_path):\n    print ("Loading Deformation Model...")\n    deepseq.load_state_dict( torch.load(pretrained_deepseq_path, map_location=casted_device) )\n    print ("Loaded")\n\nelse:\n    deepseq.training_representation(trainloader_pretrainer, loss_function, optimizer_deepseq, 1000, 1, logdir=logdir, out_modelname=outmodel_name, beta=1 )\n\n\ndeepseq(dataset_msa.prot_space)\nplot_logos_probs(deepseq(dataset_msa.prot_space)[0], alphabets)', 'execution_count': 6}
msg_type: stream
content: {'name': 'stdout', 'text': 'Loading Deformation Model...\nLoaded\n'}
Loading Deformation Model...
Loaded

msg_type: stream
content: {'name': 'stdout', 'text': " Warning: Character '?' is not in color_dict. Using black.\n Warning: Character 'X' is not in color_dict. Using black.\n"}
 Warning: Character '?' is not in color_dict. Using black.
 Warning: Character 'X' is not in color_dict. Using black.

msg_type: display_data
content: {'data': {'text/plain': '<Figure size 1000x500 with 1 Axes>', 'image/png': '\n'}, 'metadata': {}, 'transient': {}}
<Figure size 1000x500 with 1 Axes>
msg_type: execute_result
content: {'data': {'text/plain': '<logomaker.src.Logo.Logo at 0x7f3dc361bf40>'}, 'metadata': {}, 'execution_count': 6}
<logomaker.src.Logo.Logo at 0x7f3dc361bf40>
msg_type: status
content: {'execution_state': 'idle'}
Ending Cell 6------------------------------------------
Executing:  46%|████▌     | 6/13 [00:50<01:19, 11.37s/cell]Executing Cell 7---------------------------------------
Executing cell:
import matplotlib.pyplot as plt
import src.gp_cpab.src.extra.utilities as ut
import matplotlib.gridspec as gridspec
import logomaker


def get_GPinterpolation(TT, theta, Y, Ug,  n_batch, grid_length_for_GP, seq_len):
    grids_trans_out = (TT.transform_grid(TT.grid,theta)*(seq_len - 1)).squeeze(1)
    # creating the likelihood for interpolation
    batch_Multitask_model, batch_multitask_likelihood = TT.sets_MultioutputGP_per_batches(grids_trans_out, Y, n_batch)
    # To get distribution over Posteriors
    trans_data, _, \
            lower,upper  = TT.predict_operation(Ug, batch_Multitask_model, batch_multitask_likelihood  )
    trans_data = torch.reshape(trans_data, (n_batch, grid_length_for_GP, Y.shape[2]))
    lower = torch.reshape( lower, (n_batch, grid_length_for_GP, Y.shape[2]) )
    upper = torch.reshape( upper, (n_batch, grid_length_for_GP, Y.shape[2]) )

    return grids_trans_out, trans_data, lower, upper

def plot_GP_components_per_seq(Ug, gT, Trdata, Lw, Up, nrows, ncols, alphabets, title, fig):

    for j, axs in enumerate(fig.axes[(nrows-1)*ncols : nrows*ncols]):
        axs.plot( Ug.flatten().detach().numpy(), Trdata[:,j].detach().numpy(), 'b' )
        axs.fill_between(Ug.flatten().detach().numpy(), Lw[:,j].detach().numpy(),  Up[:,j].detach().numpy(), alpha=0.3)
        axs.legend([ 'Mean'])
        axs.set_xticks( Ug.flatten().detach().numpy(), minor= True )
        axs.axhline(0, color='grey', linewidth=0.8)
        axs.set_title(alphabets[j])

    #fig.tight_layout()


def create_gridSpec_graphs(ncols=4,nrows=2,figsize=(25,12)):
    fig = plt.figure(figsize=figsize) #(constrained_layout=True)
    gs = gridspec.GridSpec(ncols=ncols, nrows=nrows, figure=fig)
    for i in range(0, nrows):
        for j in range(0,ncols):
            fig.add_subplot(gs[i, j])
    return fig, gs

def plot_GP_components_alignment_channel(Ug,grids_trans_out, trans_data,lower,upper, fig2):
    for cont,(U,gT, Trdata,Lw,Up) in enumerate(list(zip(Ug,grids_trans_out, trans_data,lower,upper))):
        title='sequence {0}'.format(cont+1)
        plot_GP_components_per_seq(U, gT, Trdata, Lw, Up, cont+1, Trdata.shape[1], alphabets=alphabets, title=title, fig = fig2)

def heatmap_from_tensor_tmp(data, alphabet, title):
    import seaborn as sns
    import matplotlib.pyplot as plt

    figure, ax = plt.subplots(figsize=(8,10))
    #ax = plt.axes()
    px = pd.DataFrame(data, columns=alphabet)
    ff=sns.heatmap(px, linewidth=1, linecolor='w', annot=data, ax = ax)
    ax.set_title(title)
    plt.show()

def plot_msa_from_preds(ts_aligned, alphabet, figsize = (5,4), show_axis=True):
    fig, gs = create_gridSpec_graphs(ncols=1,nrows=ts_aligned.shape[0], figsize=figsize) #; fig.suptitle('MSA', fontsize='large')

    alphabets_logo = [ i if i!='-' else 'X' for i in alphabet]
    for cont, x_aligned in enumerate(ts_aligned):
        domain_info_df = df_construction_aas([ x_aligned.unsqueeze(0).detach().numpy() ], x_aligned.unsqueeze(0).shape, alphabets_logo)

        if show_axis == False:
            fig.axes[cont].get_xaxis().set_visible(False)
            fig.axes[cont].get_yaxis().set_visible(False)

        logomaker.Logo(domain_info_df,
                          color_scheme = 'NajafabadiEtAl2017',
                          ax = fig.axes[cont],
                          figsize=figsize, show_spines=False)



# recon_data_train = model(dataset_msa.prot_space, deepseq)
def get_GP_behavior_from_model_alignment(data,model, DS, len_grid = 13 , alphabets=['-','L','Q','R']):
    model.eval()
    Y = data
    recon_data_train = model(data, DS)

    x1_trans = recon_data_train[5]

    out_DS_before_dir_trans = DS(x1_trans)[0]

    TT=model.stn.st_gp_cpab
    TT.interpolation_type = 'GP'
    grid_length_for_GP = len_grid


    #get the transformation from Big model
    _, theta = model.sample_only_trans(Y)
    seq_len = Y.shape[1]; n_batch = Y.shape[0]

    ''' info about initial deformation '''
    '''----------------------------------------------------------------------------------------------------------------------------------------------------------------------'''
    initialTT_raw = TT.grid
    initialTT_inv = TT.transform_grid(TT.grid,-theta)
    initialTT_dir = TT.transform_grid(TT.grid,theta)
    forward = torch.stack([initialTT_raw.flatten() ,initialTT_inv.flatten(), (initialTT_inv*(x1_trans.shape[1]-1)).flatten() ]).T
    backward = torch.stack([initialTT_raw.flatten() ,initialTT_dir.flatten(), (initialTT_dir*(x1_trans.shape[1]-1)).flatten() ]).T
    heatmap_from_tensor_tmp(forward.detach().numpy(), ['input','raw','scaled'], 'FORWARD SCHEME' )
    heatmap_from_tensor_tmp(backward.detach().numpy(), ['input','raw','scaled'], 'BACKWARD SCHEME' )
    '''----------------------------------------------------------------------------------------------------------------------------------------------------------------------'''

    # grid creations and deformations based on theta estimated from big model

    Ug=TT.uniform_meshgrid((grid_length_for_GP,grid_length_for_GP)).repeat(n_batch,1,1)*(seq_len - 1)

    grids_trans_out, trans_data, lower, upper = get_GPinterpolation(TT, -theta, Y, Ug, n_batch, grid_length_for_GP, seq_len)
    grids_dir_trans_out, dir_trans_data, lower_dir, upper_dir = get_GPinterpolation(TT, theta, out_DS_before_dir_trans, Ug, n_batch, grid_length_for_GP, seq_len)

    ncols= grids_trans_out.shape[-1]; nrows = Ug.shape[0]
    fig, gs = create_gridSpec_graphs(ncols=ncols,nrows=nrows, figsize=(25,20)); fig.suptitle('Sequence Alignment by Transformation', fontsize='large')
    figdir, gsdir = create_gridSpec_graphs(ncols=ncols,nrows=nrows,figsize=(25,20)); figdir.suptitle('Sequence Reconstruction', fontsize='large')

    plot_GP_components_alignment_channel(Ug,grids_trans_out, trans_data,lower,upper, fig)
    plot_GP_components_alignment_channel(Ug,grids_dir_trans_out, dir_trans_data,lower_dir,upper_dir, figdir)



#x = deepseq(trainloader_pretrainer.dataset.prot_space)
#plot_msa_from_preds(x[0], alphabets, figsize=(15,10), show_axis=False)


msg_type: status
content: {'execution_state': 'busy'}
msg_type: execute_input
content: {'code': "import matplotlib.pyplot as plt\nimport src.gp_cpab.src.extra.utilities as ut\nimport matplotlib.gridspec as gridspec\nimport logomaker\n\n\ndef get_GPinterpolation(TT, theta, Y, Ug,  n_batch, grid_length_for_GP, seq_len):\n    grids_trans_out = (TT.transform_grid(TT.grid,theta)*(seq_len - 1)).squeeze(1)\n    # creating the likelihood for interpolation\n    batch_Multitask_model, batch_multitask_likelihood = TT.sets_MultioutputGP_per_batches(grids_trans_out, Y, n_batch)\n    # To get distribution over Posteriors\n    trans_data, _, \\\n            lower,upper  = TT.predict_operation(Ug, batch_Multitask_model, batch_multitask_likelihood  )\n    trans_data = torch.reshape(trans_data, (n_batch, grid_length_for_GP, Y.shape[2]))\n    lower = torch.reshape( lower, (n_batch, grid_length_for_GP, Y.shape[2]) )\n    upper = torch.reshape( upper, (n_batch, grid_length_for_GP, Y.shape[2]) )\n\n    return grids_trans_out, trans_data, lower, upper\n\ndef plot_GP_components_per_seq(Ug, gT, Trdata, Lw, Up, nrows, ncols, alphabets, title, fig):\n\n    for j, axs in enumerate(fig.axes[(nrows-1)*ncols : nrows*ncols]):\n        axs.plot( Ug.flatten().detach().numpy(), Trdata[:,j].detach().numpy(), 'b' )\n        axs.fill_between(Ug.flatten().detach().numpy(), Lw[:,j].detach().numpy(),  Up[:,j].detach().numpy(), alpha=0.3)\n        axs.legend([ 'Mean'])\n        axs.set_xticks( Ug.flatten().detach().numpy(), minor= True )\n        axs.axhline(0, color='grey', linewidth=0.8)\n        axs.set_title(alphabets[j])\n\n    #fig.tight_layout()\n\n\ndef create_gridSpec_graphs(ncols=4,nrows=2,figsize=(25,12)):\n    fig = plt.figure(figsize=figsize) #(constrained_layout=True)\n    gs = gridspec.GridSpec(ncols=ncols, nrows=nrows, figure=fig)\n    for i in range(0, nrows):\n        for j in range(0,ncols):\n            fig.add_subplot(gs[i, j])\n    return fig, gs\n\ndef plot_GP_components_alignment_channel(Ug,grids_trans_out, trans_data,lower,upper, fig2):\n    for cont,(U,gT, Trdata,Lw,Up) in enumerate(list(zip(Ug,grids_trans_out, trans_data,lower,upper))):\n        title='sequence {0}'.format(cont+1)\n        plot_GP_components_per_seq(U, gT, Trdata, Lw, Up, cont+1, Trdata.shape[1], alphabets=alphabets, title=title, fig = fig2)\n\ndef heatmap_from_tensor_tmp(data, alphabet, title):\n    import seaborn as sns\n    import matplotlib.pyplot as plt\n\n    figure, ax = plt.subplots(figsize=(8,10))\n    #ax = plt.axes()\n    px = pd.DataFrame(data, columns=alphabet)\n    ff=sns.heatmap(px, linewidth=1, linecolor='w', annot=data, ax = ax)\n    ax.set_title(title)\n    plt.show()\n\ndef plot_msa_from_preds(ts_aligned, alphabet, figsize = (5,4), show_axis=True):\n    fig, gs = create_gridSpec_graphs(ncols=1,nrows=ts_aligned.shape[0], figsize=figsize) #; fig.suptitle('MSA', fontsize='large')\n\n    alphabets_logo = [ i if i!='-' else 'X' for i in alphabet]\n    for cont, x_aligned in enumerate(ts_aligned):\n        domain_info_df = df_construction_aas([ x_aligned.unsqueeze(0).detach().numpy() ], x_aligned.unsqueeze(0).shape, alphabets_logo)\n\n        if show_axis == False:\n            fig.axes[cont].get_xaxis().set_visible(False)\n            fig.axes[cont].get_yaxis().set_visible(False)\n\n        logomaker.Logo(domain_info_df,\n                          color_scheme = 'NajafabadiEtAl2017',\n                          ax = fig.axes[cont],\n                          figsize=figsize, show_spines=False)\n\n\n\n# recon_data_train = model(dataset_msa.prot_space, deepseq)\ndef get_GP_behavior_from_model_alignment(data,model, DS, len_grid = 13 , alphabets=['-','L','Q','R']):\n    model.eval()\n    Y = data\n    recon_data_train = model(data, DS)\n\n    x1_trans = recon_data_train[5]\n\n    out_DS_before_dir_trans = DS(x1_trans)[0]\n\n    TT=model.stn.st_gp_cpab\n    TT.interpolation_type = 'GP'\n    grid_length_for_GP = len_grid\n\n\n    #get the transformation from Big model\n    _, theta = model.sample_only_trans(Y)\n    seq_len = Y.shape[1]; n_batch = Y.shape[0]\n\n    ''' info about initial deformation '''\n    '''----------------------------------------------------------------------------------------------------------------------------------------------------------------------'''\n    initialTT_raw = TT.grid\n    initialTT_inv = TT.transform_grid(TT.grid,-theta)\n    initialTT_dir = TT.transform_grid(TT.grid,theta)\n    forward = torch.stack([initialTT_raw.flatten() ,initialTT_inv.flatten(), (initialTT_inv*(x1_trans.shape[1]-1)).flatten() ]).T\n    backward = torch.stack([initialTT_raw.flatten() ,initialTT_dir.flatten(), (initialTT_dir*(x1_trans.shape[1]-1)).flatten() ]).T\n    heatmap_from_tensor_tmp(forward.detach().numpy(), ['input','raw','scaled'], 'FORWARD SCHEME' )\n    heatmap_from_tensor_tmp(backward.detach().numpy(), ['input','raw','scaled'], 'BACKWARD SCHEME' )\n    '''----------------------------------------------------------------------------------------------------------------------------------------------------------------------'''\n\n    # grid creations and deformations based on theta estimated from big model\n\n    Ug=TT.uniform_meshgrid((grid_length_for_GP,grid_length_for_GP)).repeat(n_batch,1,1)*(seq_len - 1)\n\n    grids_trans_out, trans_data, lower, upper = get_GPinterpolation(TT, -theta, Y, Ug, n_batch, grid_length_for_GP, seq_len)\n    grids_dir_trans_out, dir_trans_data, lower_dir, upper_dir = get_GPinterpolation(TT, theta, out_DS_before_dir_trans, Ug, n_batch, grid_length_for_GP, seq_len)\n\n    ncols= grids_trans_out.shape[-1]; nrows = Ug.shape[0]\n    fig, gs = create_gridSpec_graphs(ncols=ncols,nrows=nrows, figsize=(25,20)); fig.suptitle('Sequence Alignment by Transformation', fontsize='large')\n    figdir, gsdir = create_gridSpec_graphs(ncols=ncols,nrows=nrows,figsize=(25,20)); figdir.suptitle('Sequence Reconstruction', fontsize='large')\n\n    plot_GP_components_alignment_channel(Ug,grids_trans_out, trans_data,lower,upper, fig)\n    plot_GP_components_alignment_channel(Ug,grids_dir_trans_out, dir_trans_data,lower_dir,upper_dir, figdir)\n\n\n\n#x = deepseq(trainloader_pretrainer.dataset.prot_space)\n#plot_msa_from_preds(x[0], alphabets, figsize=(15,10), show_axis=False)\n\n", 'execution_count': 7}
msg_type: status
content: {'execution_state': 'idle'}
Ending Cell 7------------------------------------------
Executing Cell 8---------------------------------------
Executing cell:
import time

def update_behavior_loss_batches(batch_loss_dict, batch_key, batch_historical):
    if batch_key not in batch_loss_dict:
        batch_loss_dict[batch_key] =  [batch_historical]
    else:
        batch_loss_dict[batch_key].append(batch_historical)

def batch_plots(batch_loss_dict):
    import matplotlib.pyplot as plt

    if len(batch_loss_dict.keys())==1:
         values= batch_loss_dict[ list(batch_loss_dict.keys())[0] ]
         epochs_i = list(range(0,len(values)))
         plt.plot(epochs_i, values)
    else:
        fig, ax = plt.subplots(len(batch_loss_dict.keys()),1, figsize=(4,10))
        fig.tight_layout()

        for i in batch_loss_dict.keys():
            y = batch_loss_dict[i]
            x = list(range(0,len(y)))
            ax[i].set_title('Batch ' + str(i))
            ax[i].plot(x,y)

    plt.show()

def fit_VITAE_with_pretrained_DeepSeq(trainloader, optimizer, model, DS, n_epochs=10, warmup=1, logdir='',
            testloader=None, eq_samples=1, iw_samples=1, beta=1.0, eval_epoch=10000, **kargs):
        """ Fits the supplied model to a training set
        Arguments:
            trainloader: dataloader (of type torch.utils.data.DataLoader) that
                contains the training data
            n_epochs: integer, number of epochs to run
            warmup: integer, the KL terms are weighted by epoch/warmup, so this
                number determines the number of epochs before the KL-terms are
                fully activated in the loss function
            logdir: str, where to store the results
            testloader: dataloader (of type torch.utils.data.DataLoader) that
                contains the test data
            eq_samples: integer, number of equality samples which the expectation
                is calculated over
            iw_samples: integer, number of samples the mean-log is calculated over
            eval_epoch: how many epochs that should pass between calculating the
                L5000 loglikelihood (very expensive to do)
        """

        # Assert that input is okay
        assert isinstance(trainloader, torch.utils.data.DataLoader), '''Trainloader
            should be an instance of torch.utils.data.DataLoader '''
        assert warmup <= n_epochs, ''' Warmup period need to be smaller than the
            number of epochs '''

        # Print stats
        print('Number of training points: ', len(trainloader.dataset.prot_space))
        if testloader: print('Number of test points:     ', len(testloader.dataset))

        loss_function = LossFunctionsAlternatives()

        #scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=550, gamma=0.1)
        #import ipdb; ipdb.set_trace()

        # Main loop
        start = time.time()
        for epoch in range(1, n_epochs+1):
            progress_bar = tqdm(desc='Epoch ' + str(epoch) + '/' + str(n_epochs),
                                total=len(trainloader.dataset), unit='samples')
            train_loss = 0
            # Training loop
            #self.model.train()
            # Decay Learning Rate
            #scheduler.step()

            if epoch == 205:
                 print('From Here')
            for i, data in enumerate(trainloader):
                # Zero gradient
                optimizer.zero_grad()

                # Feed forward data
                data = data.to(torch.float32)#.to(device)

                switch = 1.0 if epoch > warmup else 0.0
                out = model(data, DS, eq_samples, iw_samples, switch)

                # Calculat loss
                loss = loss_function(method = 'CE', input = out[0], target = data, forw_per=(0,2,1)) - beta*out[7]
                #loss = loss_function(method = 'JSD', input = out[0], target = data, forw_per=(0,2,1)) # - out[7]


                # Backpropegate and optimize
                loss.backward()
                #torch.nn.utils.clip_grad_value_(model.parameters(), 0.5)

                ### UPDATE MODEL PARAMETERS
                optimizer.step()


                #########################################################
                #########################################################
                ### GRADIENT CLIPPING
                #torch.nn.utils.clip_grad_value_(model.parameters(), 1.)
                #torch.nn.utils.clip_grad_norm_(model.parameters(), 1., norm_type=2)
                #########################################################
                #########################################################

                # Write to consoeeeddddddddwwww######hhhdffffffffffsssswqqq#l#
                progress_bar.update(data.size(0))
                progress_bar.set_postfix({'loss': str(loss.item())  })
                #progress_bar.set_postfix({'loss': str(loss.item()) + ', lr rate: ' + str(scheduler.get_lr()[-1]) })
                update_behavior_loss_batches(batch_loss_dict, i, loss.item())

                # Save to tensorboard
                iteration = epoch*len(trainloader) + i

                gc.collect()
                torch.cuda.empty_cache()

            progress_bar.close()

        print('Total train time', time.time() - start)
        #import pdb;pdb.set_trace()
        # Save the embeddings
msg_type: status
content: {'execution_state': 'busy'}
msg_type: execute_input
content: {'code': 'import time\n\ndef update_behavior_loss_batches(batch_loss_dict, batch_key, batch_historical):\n    if batch_key not in batch_loss_dict:\n        batch_loss_dict[batch_key] =  [batch_historical]\n    else:\n        batch_loss_dict[batch_key].append(batch_historical)\n\ndef batch_plots(batch_loss_dict):\n    import matplotlib.pyplot as plt\n\n    if len(batch_loss_dict.keys())==1:\n         values= batch_loss_dict[ list(batch_loss_dict.keys())[0] ]\n         epochs_i = list(range(0,len(values)))\n         plt.plot(epochs_i, values)\n    else:\n        fig, ax = plt.subplots(len(batch_loss_dict.keys()),1, figsize=(4,10))\n        fig.tight_layout()\n\n        for i in batch_loss_dict.keys():\n            y = batch_loss_dict[i]\n            x = list(range(0,len(y)))\n            ax[i].set_title(\'Batch \' + str(i))\n            ax[i].plot(x,y)\n\n    plt.show()\n\ndef fit_VITAE_with_pretrained_DeepSeq(trainloader, optimizer, model, DS, n_epochs=10, warmup=1, logdir=\'\',\n            testloader=None, eq_samples=1, iw_samples=1, beta=1.0, eval_epoch=10000, **kargs):\n        """ Fits the supplied model to a training set\n        Arguments:\n            trainloader: dataloader (of type torch.utils.data.DataLoader) that\n                contains the training data\n            n_epochs: integer, number of epochs to run\n            warmup: integer, the KL terms are weighted by epoch/warmup, so this\n                number determines the number of epochs before the KL-terms are\n                fully activated in the loss function\n            logdir: str, where to store the results\n            testloader: dataloader (of type torch.utils.data.DataLoader) that\n                contains the test data\n            eq_samples: integer, number of equality samples which the expectation\n                is calculated over\n            iw_samples: integer, number of samples the mean-log is calculated over\n            eval_epoch: how many epochs that should pass between calculating the\n                L5000 loglikelihood (very expensive to do)\n        """\n\n        # Assert that input is okay\n        assert isinstance(trainloader, torch.utils.data.DataLoader), \'\'\'Trainloader\n            should be an instance of torch.utils.data.DataLoader \'\'\'\n        assert warmup <= n_epochs, \'\'\' Warmup period need to be smaller than the\n            number of epochs \'\'\'\n\n        # Print stats\n        print(\'Number of training points: \', len(trainloader.dataset.prot_space))\n        if testloader: print(\'Number of test points:     \', len(testloader.dataset))\n\n        loss_function = LossFunctionsAlternatives()\n\n        #scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=550, gamma=0.1)\n        #import ipdb; ipdb.set_trace()\n\n        # Main loop\n        start = time.time()\n        for epoch in range(1, n_epochs+1):\n            progress_bar = tqdm(desc=\'Epoch \' + str(epoch) + \'/\' + str(n_epochs),\n                                total=len(trainloader.dataset), unit=\'samples\')\n            train_loss = 0\n            # Training loop\n            #self.model.train()\n            # Decay Learning Rate\n            #scheduler.step()\n\n            if epoch == 205:\n                 print(\'From Here\')\n            for i, data in enumerate(trainloader):\n                # Zero gradient\n                optimizer.zero_grad()\n\n                # Feed forward data\n                data = data.to(torch.float32)#.to(device)\n\n                switch = 1.0 if epoch > warmup else 0.0\n                out = model(data, DS, eq_samples, iw_samples, switch)\n\n                # Calculat loss\n                loss = loss_function(method = \'CE\', input = out[0], target = data, forw_per=(0,2,1)) - beta*out[7]\n                #loss = loss_function(method = \'JSD\', input = out[0], target = data, forw_per=(0,2,1)) # - out[7]\n\n\n                # Backpropegate and optimize\n                loss.backward()\n                #torch.nn.utils.clip_grad_value_(model.parameters(), 0.5)\n\n                ### UPDATE MODEL PARAMETERS\n                optimizer.step()\n\n\n                #########################################################\n                #########################################################\n                ### GRADIENT CLIPPING\n                #torch.nn.utils.clip_grad_value_(model.parameters(), 1.)\n                #torch.nn.utils.clip_grad_norm_(model.parameters(), 1., norm_type=2)\n                #########################################################\n                #########################################################\n\n                # Write to consoeeeddddddddwwww######hhhdffffffffffsssswqqq#l#\n                progress_bar.update(data.size(0))\n                progress_bar.set_postfix({\'loss\': str(loss.item())  })\n                #progress_bar.set_postfix({\'loss\': str(loss.item()) + \', lr rate: \' + str(scheduler.get_lr()[-1]) })\n                update_behavior_loss_batches(batch_loss_dict, i, loss.item())\n\n                # Save to tensorboard\n                iteration = epoch*len(trainloader) + i\n\n                gc.collect()\n                torch.cuda.empty_cache()\n\n            progress_bar.close()\n\n        print(\'Total train time\', time.time() - start)\n        #import pdb;pdb.set_trace()\n        # Save the embeddings', 'execution_count': 8}
msg_type: status
content: {'execution_state': 'idle'}
Ending Cell 8------------------------------------------
Executing Cell 9---------------------------------------
Executing cell:

batch_loss_dict = {}
logdir_density = 'pretrained_densities'; outmodel_name_density = 'trained_density_BLAT_23_preprint_23feb2024_batchsize_100.pth'
pretrained_density = logdir_density + "/" + outmodel_name_density
#import ipdb; ipdb.set_trace()

# Construct model
# I do not add the pretrained deepsequence module to avoid
# the backpropagation of such module during the optimization
model = PGM_LA_latent_alignment(
                    input_shape = seq_size, #img_size,
                    config = std,
                    latent_dim = args.latent_dim,
                    encoder = get_encoder( args.ed_type.split(",")[0] ),
                    decoder = get_decoder( args.ed_type.split(",")[1] ),
                    outputdensity = args.density,
                    ST_type = args.stn_type,
                    alphabet_size = len(c2i),
                    trans_parameters = ( [window_grid], device, gp_params ),
                    diagonal_att_regions = [-575,575])#[-175,175] [-15,15] ) #[15,15] #if we increase it, major accuracy

#model.get_deepsequence_module(deepseq)

# Optimizer
opt = torch.optim.AdamW(model.parameters(), lr=1e-5)#, weight_decay=1e-19)#lr=1e-3 also works but we have to test with seed samples
model_name = '/trained_model_softmax.pt'


if os.path.isfile(pretrained_density):
    print ("Loading Density Model...")
    model.load_state_dict( torch.load(pretrained_density, map_location=casted_device) )
    print ("Loaded")
else:
    fit_VITAE_with_pretrained_DeepSeq(trainloader, opt, model, deepseq, n_epochs=400, warmup=1, logdir='',
            testloader=None, eq_samples=1, iw_samples=1, beta=1.0, eval_epoch=10) # initi
    
    torch.save(model.state_dict(), pretrained_density)



msg_type: status
content: {'execution_state': 'busy'}
msg_type: execute_input
content: {'code': '\nbatch_loss_dict = {}\nlogdir_density = \'pretrained_densities\'; outmodel_name_density = \'trained_density_BLAT_23_preprint_23feb2024_batchsize_100.pth\'\npretrained_density = logdir_density + "/" + outmodel_name_density\n#import ipdb; ipdb.set_trace()\n\n# Construct model\n# I do not add the pretrained deepsequence module to avoid\n# the backpropagation of such module during the optimization\nmodel = PGM_LA_latent_alignment(\n                    input_shape = seq_size, #img_size,\n                    config = std,\n                    latent_dim = args.latent_dim,\n                    encoder = get_encoder( args.ed_type.split(",")[0] ),\n                    decoder = get_decoder( args.ed_type.split(",")[1] ),\n                    outputdensity = args.density,\n                    ST_type = args.stn_type,\n                    alphabet_size = len(c2i),\n                    trans_parameters = ( [window_grid], device, gp_params ),\n                    diagonal_att_regions = [-575,575])#[-175,175] [-15,15] ) #[15,15] #if we increase it, major accuracy\n\n#model.get_deepsequence_module(deepseq)\n\n# Optimizer\nopt = torch.optim.AdamW(model.parameters(), lr=1e-5)#, weight_decay=1e-19)#lr=1e-3 also works but we have to test with seed samples\nmodel_name = \'/trained_model_softmax.pt\'\n\n\nif os.path.isfile(pretrained_density):\n    print ("Loading Density Model...")\n    model.load_state_dict( torch.load(pretrained_density, map_location=casted_device) )\n    print ("Loaded")\nelse:\n    fit_VITAE_with_pretrained_DeepSeq(trainloader, opt, model, deepseq, n_epochs=400, warmup=1, logdir=\'\',\n            testloader=None, eq_samples=1, iw_samples=1, beta=1.0, eval_epoch=10) # initi\n    \n    torch.save(model.state_dict(), pretrained_density)\n\n\n', 'execution_count': 9}
msg_type: stream
content: {'name': 'stdout', 'text': 'Loading Density Model...\nLoaded\n'}
Loading Density Model...
Loaded

msg_type: status
content: {'execution_state': 'idle'}
Ending Cell 9------------------------------------------
Executing:  69%|██████▉   | 9/13 [00:52<00:23,  5.86s/cell]Executing Cell 10--------------------------------------
Executing cell:

def get_elbos(model, set, aux=None):
    import torch.nn.functional as F
    model.eval()


    idx_recon = 0
    #loss_function = LossFunctionsAlternatives()
    loss_function = torch.nn.CrossEntropyLoss(reduction='mean')
    #loss_function = F.cross_entropy
    #            self.component_vals = self.Cross_Entropy(input.permute(forw_per), target.argmax(-1))
    #        self.loss= self.component_vals.sum(dim=-1).mean()
    if model.__class__.__name__=='DeepSequence': idx_kls = 5
    else: idx_kls = 7
    
    with torch.no_grad():
        acc_m_elbo = 0
        acc_wt_elbo = 0
        
        wt = set[0,:,:].unsqueeze(0)
        mutants = set[1:,:,:]
        
        if aux==None:
            results_wt = model(wt)
            results_mutants = model(mutants)
            log_p_mutant = loss_function(results_mutants[idx_recon].permute(0,2,1), mutants.argmax(-1))
            log_p_wt     = loss_function(results_wt[idx_recon].permute(0,2,1), wt.argmax(-1))
            elbo_wt      = log_p_wt - results_wt[idx_kls]
            elbo_mutants = log_p_mutant - results_mutants[idx_kls]
        else:
            results_wt = model(wt, aux, 1, 1, 1)
            log_p_wt     = loss_function(results_wt[0].permute(0,2,1), wt.argmax(-1))
            elbo_wt      = log_p_wt + results_wt[idx_kls]
            
            # Process the 500 sequences in batches of 100 sequences each
            mutants_batch = torch.split(mutants, 10)
            results_mutants = []; batch_log_p_mutants = []; batch_elbo_mutants = []
            #results_mutants = [ model(i,aux, 1, 1, 1) for i in tqdm(mutants_batch) ]
            for ii in tqdm(mutants_batch):
                res_tmp = model(ii,aux, 1, 1, 1)

                recon_tmp = loss_function(res_tmp[idx_recon].permute(0,2,1), ii.argmax(-1))
                
                results_mutants.append(res_tmp)
                batch_log_p_mutants.append( recon_tmp )
                batch_elbo_mutants.append( recon_tmp +  res_tmp[idx_kls] )


            log_p_mutant = torch.mean( torch.tensor(batch_log_p_mutants) )
            elbo_mutants = torch.mean( torch.tensor(batch_elbo_mutants) )
            
                        
        delta_elbo = elbo_mutants - elbo_wt
        
    return {'log_p_mutant':log_p_mutant.cpu().item(), 'log_p_wt':log_p_wt.cpu().item(),
            'elbo_wt':elbo_wt.cpu().item(), 'elbo_mutants':elbo_mutants.cpu().item(),
            'delta_elbo':delta_elbo.cpu().item()}
    
def make_table_to_latex(Results_Table):
    
    latex_out = Results_Table.to_latex(
        column_format='cccccc',  # Custom column alignment
        header=True,                # Include column names
        index=True,                 # Include row indexes
        index_names=True,           # Include index names
        bold_rows=True,             # Bold first level of row labels
        float_format="%.2f",        # Format floating-point numbers
        na_rep="-"                  # Replace missing values with "-"
    )

    latex_out = latex_out.replace('\\toprule','\\hline\\hline')
    latex_out = latex_out.replace('\\midrule','\\hline\\hline')
    latex_out = latex_out.replace('\\bottomrule','\\hline\\hline')

    with open( output_results_test5, 'w') as f:
        f.write(latex_out)

def ELBO_MultipleSampling_experiment( model, set, iter=10, aux=None ):
    
    res_samples =[]

    if aux==None:
        for i in range(0,iter):
            print('Sampling #{}'.format(i))
            res_samples.append(
                               get_elbos(model, set, aux=None)
                               )
    
    else:
        for i in range(0,iter):
            print('Sampling #{}'.format(i))
            res_samples.append(
                               get_elbos(model, set, aux=aux)
                               )
            
    df_bulk_res = pd.DataFrame(res_samples)
    
    return {'log_p_mutant':df_bulk_res.log_p_mutant.mean().item(), 
            'log_p_wt':df_bulk_res.log_p_wt.mean().item(),
            'elbo_wt':df_bulk_res.elbo_wt.mean().item(), 
            'elbo_mutants':df_bulk_res.elbo_mutants.mean().item(),
            'delta_elbo':df_bulk_res.delta_elbo.mean().item()}
    
        

output_results_test5 = 'Final_Results_test5.tex'

subset = dataset_msa.prot_space#[0:4, :, :]
subset_msa = dataset_aligned_msa.prot_space#[0:500, :, :]


import pprint
res_DeepSeq = get_elbos(deepseq, subset_msa, aux=None)
res_PGM = get_elbos(model, subset, aux=deepseq)
res_DeepSeq_sampling = ELBO_MultipleSampling_experiment( deepseq, subset, iter=20, aux=None )
res_PGM_sampling = ELBO_MultipleSampling_experiment( model, subset, iter=20, aux=deepseq )
pprint.pprint(res_DeepSeq)
pprint.pprint(res_PGM)
pprint.pprint(res_PGM_sampling)

Results_Table = pd.DataFrame([res_DeepSeq, res_PGM, res_DeepSeq_sampling, res_PGM_sampling], index=['DeepSequence', 'Our', 'DeepSequence_Sampling','Our_sampling']) 
make_table_to_latex(Results_Table)
print( Results_Table )


    
print('Done')

msg_type: status
content: {'execution_state': 'busy'}
msg_type: execute_input
content: {'code': '\ndef get_elbos(model, set, aux=None):\n    import torch.nn.functional as F\n    model.eval()\n\n\n    idx_recon = 0\n    #loss_function = LossFunctionsAlternatives()\n    loss_function = torch.nn.CrossEntropyLoss(reduction=\'mean\')\n    #loss_function = F.cross_entropy\n    #            self.component_vals = self.Cross_Entropy(input.permute(forw_per), target.argmax(-1))\n    #        self.loss= self.component_vals.sum(dim=-1).mean()\n    if model.__class__.__name__==\'DeepSequence\': idx_kls = 5\n    else: idx_kls = 7\n    \n    with torch.no_grad():\n        acc_m_elbo = 0\n        acc_wt_elbo = 0\n        \n        wt = set[0,:,:].unsqueeze(0)\n        mutants = set[1:,:,:]\n        \n        if aux==None:\n            results_wt = model(wt)\n            results_mutants = model(mutants)\n            log_p_mutant = loss_function(results_mutants[idx_recon].permute(0,2,1), mutants.argmax(-1))\n            log_p_wt     = loss_function(results_wt[idx_recon].permute(0,2,1), wt.argmax(-1))\n            elbo_wt      = log_p_wt - results_wt[idx_kls]\n            elbo_mutants = log_p_mutant - results_mutants[idx_kls]\n        else:\n            results_wt = model(wt, aux, 1, 1, 1)\n            log_p_wt     = loss_function(results_wt[0].permute(0,2,1), wt.argmax(-1))\n            elbo_wt      = log_p_wt + results_wt[idx_kls]\n            \n            # Process the 500 sequences in batches of 100 sequences each\n            mutants_batch = torch.split(mutants, 10)\n            results_mutants = []; batch_log_p_mutants = []; batch_elbo_mutants = []\n            #results_mutants = [ model(i,aux, 1, 1, 1) for i in tqdm(mutants_batch) ]\n            for ii in tqdm(mutants_batch):\n                res_tmp = model(ii,aux, 1, 1, 1)\n\n                recon_tmp = loss_function(res_tmp[idx_recon].permute(0,2,1), ii.argmax(-1))\n                \n                results_mutants.append(res_tmp)\n                batch_log_p_mutants.append( recon_tmp )\n                batch_elbo_mutants.append( recon_tmp +  res_tmp[idx_kls] )\n\n\n            log_p_mutant = torch.mean( torch.tensor(batch_log_p_mutants) )\n            elbo_mutants = torch.mean( torch.tensor(batch_elbo_mutants) )\n            \n                        \n        delta_elbo = elbo_mutants - elbo_wt\n        \n    return {\'log_p_mutant\':log_p_mutant.cpu().item(), \'log_p_wt\':log_p_wt.cpu().item(),\n            \'elbo_wt\':elbo_wt.cpu().item(), \'elbo_mutants\':elbo_mutants.cpu().item(),\n            \'delta_elbo\':delta_elbo.cpu().item()}\n    \ndef make_table_to_latex(Results_Table):\n    \n    latex_out = Results_Table.to_latex(\n        column_format=\'cccccc\',  # Custom column alignment\n        header=True,                # Include column names\n        index=True,                 # Include row indexes\n        index_names=True,           # Include index names\n        bold_rows=True,             # Bold first level of row labels\n        float_format="%.2f",        # Format floating-point numbers\n        na_rep="-"                  # Replace missing values with "-"\n    )\n\n    latex_out = latex_out.replace(\'\\\\toprule\',\'\\\\hline\\\\hline\')\n    latex_out = latex_out.replace(\'\\\\midrule\',\'\\\\hline\\\\hline\')\n    latex_out = latex_out.replace(\'\\\\bottomrule\',\'\\\\hline\\\\hline\')\n\n    with open( output_results_test5, \'w\') as f:\n        f.write(latex_out)\n\ndef ELBO_MultipleSampling_experiment( model, set, iter=10, aux=None ):\n    \n    res_samples =[]\n\n    if aux==None:\n        for i in range(0,iter):\n            print(\'Sampling #{}\'.format(i))\n            res_samples.append(\n                               get_elbos(model, set, aux=None)\n                               )\n    \n    else:\n        for i in range(0,iter):\n            print(\'Sampling #{}\'.format(i))\n            res_samples.append(\n                               get_elbos(model, set, aux=aux)\n                               )\n            \n    df_bulk_res = pd.DataFrame(res_samples)\n    \n    return {\'log_p_mutant\':df_bulk_res.log_p_mutant.mean().item(), \n            \'log_p_wt\':df_bulk_res.log_p_wt.mean().item(),\n            \'elbo_wt\':df_bulk_res.elbo_wt.mean().item(), \n            \'elbo_mutants\':df_bulk_res.elbo_mutants.mean().item(),\n            \'delta_elbo\':df_bulk_res.delta_elbo.mean().item()}\n    \n        \n\noutput_results_test5 = \'Final_Results_test5.tex\'\n\nsubset = dataset_msa.prot_space#[0:4, :, :]\nsubset_msa = dataset_aligned_msa.prot_space#[0:500, :, :]\n\n\nimport pprint\nres_DeepSeq = get_elbos(deepseq, subset_msa, aux=None)\nres_PGM = get_elbos(model, subset, aux=deepseq)\nres_DeepSeq_sampling = ELBO_MultipleSampling_experiment( deepseq, subset, iter=20, aux=None )\nres_PGM_sampling = ELBO_MultipleSampling_experiment( model, subset, iter=20, aux=deepseq )\npprint.pprint(res_DeepSeq)\npprint.pprint(res_PGM)\npprint.pprint(res_PGM_sampling)\n\nResults_Table = pd.DataFrame([res_DeepSeq, res_PGM, res_DeepSeq_sampling, res_PGM_sampling], index=[\'DeepSequence\', \'Our\', \'DeepSequence_Sampling\',\'Our_sampling\']) \nmake_table_to_latex(Results_Table)\nprint( Results_Table )\n\n\n    \nprint(\'Done\')\n', 'execution_count': 10}
msg_type: stream
content: {'name': 'stderr', 'text': '/net/ged.nzcorp.net/z/home/sgal/ML_Projects/Explicit_Disentanglement_Molecules/src/gp_cpab/src/transformation/libcpab/libcpab/pytorch/functions.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(x, dtype=dtype, device=device)\n'}
/net/ged.nzcorp.net/z/home/sgal/ML_Projects/Explicit_Disentanglement_Molecules/src/gp_cpab/src/transformation/libcpab/libcpab/pytorch/functions.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(x, dtype=dtype, device=device)

msg_type: stream
content: {'name': 'stderr', 'text': '/net/ged.nzcorp.net/z/home/sgal/ML_Projects/Explicit_Disentanglement_Molecules/src/models/experimental/PGM_LA_latent_alignment.py:302: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  x_mean = torch.tensor(x_mean_no_grad, requires_grad=True)\n/net/ged.nzcorp.net/z/home/sgal/ML_Projects/Explicit_Disentanglement_Molecules/src/models/experimental/PGM_LA_latent_alignment.py:303: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  x_var = torch.tensor(x_var_no_grad, requires_grad=True)\n'}
/net/ged.nzcorp.net/z/home/sgal/ML_Projects/Explicit_Disentanglement_Molecules/src/models/experimental/PGM_LA_latent_alignment.py:302: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  x_mean = torch.tensor(x_mean_no_grad, requires_grad=True)
/net/ged.nzcorp.net/z/home/sgal/ML_Projects/Explicit_Disentanglement_Molecules/src/models/experimental/PGM_LA_latent_alignment.py:303: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  x_var = torch.tensor(x_var_no_grad, requires_grad=True)

msg_type: stream
content: {'name': 'stderr', 'text': '\r  0%|          | 0/50 [00:00<?, ?it/s]'}
  0%|          | 0/50 [00:00<?, ?it/s]
msg_type: stream
content: {'name': 'stderr', 'text': '\r  2%|▏         | 1/50 [00:01<01:14,  1.52s/it]'}
  2%|▏         | 1/50 [00:01<01:14,  1.52s/it]
msg_type: stream
content: {'name': 'stderr', 'text': '\r  4%|▍         | 2/50 [00:03<01:12,  1.52s/it]'}
  4%|▍         | 2/50 [00:03<01:12,  1.52s/it]
slurmstepd: error: *** JOB 183457 ON koala CANCELLED AT 2024-02-28T19:42:42 ***
